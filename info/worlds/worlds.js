// Fixed Worlds functionality with enhanced multilingual support

// Language management
let worldsCurrentLanguage = 'en';  // Changed variable name for consistency
let worldsTranslations = null;
let worldsInitialized = false;

// Get language from localStorage or default to English
function getCurrentLanguage() {
    const saved = localStorage.getItem('armHelper_language');
    return saved || 'en';
}

// Load translations from JSON file
async function loadWorldsTranslations() {
    if (worldsTranslations) return worldsTranslations;
    
    try {
        console.log('üì• Loading worlds translations...');
        const response = await fetch('info/worlds/worlds.json');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        worldsTranslations = await response.json();
        console.log('‚úÖ Worlds translations loaded successfully');
        return worldsTranslations;
    } catch (error) {
        console.error('‚ùå Error loading worlds translations:', error);
        // Fallback to English if translations fail to load
        worldsTranslations = {
            en: {
                title: "Worlds Info",
                loading: "Loading worlds...",
                error: "Error loading worlds data",
                retry: "Retry",
                worlds: [
                    {
                        title: "World 0: Garden",
                        icon: "üå≥",
                        description: "Weekly leaderboard | Mail | Token store | Garden",
                        details: "To get here you need to open 3 worlds"
                    },
                    {
                        title: "World 1: Spawn",
                        icon: "üè†",
                        description: "The starting world where your adventure begins",
                        details: "Default spawn location for all new players"
                    },
                    {
                        title: "World 2: Fantasy",
                        icon: "üè∞",
                        description: "A magical realm full of mythical creatures and enchanted forests",
                        details: "Unlock requirement: Complete World 1"
                    },
                    {
                        title: "World 3: Tech",
                        icon: "ü§ñ",
                        description: "Futuristic world with advanced technology and cyber pets",
                        details: "Unlock requirement: Complete World 2"
                    },
                    {
                        title: "World 4: Axolotl Ocean",
                        icon: "üåä",
                        description: "Underwater paradise filled with axolotls and marine life",
                        details: "Unlock requirement: Complete World 3"
                    }
                ]
            },
            uk: {
                title: "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–≤—ñ—Ç–∏",
                loading: "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–≤—ñ—Ç—ñ–≤...",
                error: "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤—ñ—Ç—ñ–≤",
                retry: "–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É",
                worlds: [
                    {
                        title: "–°–≤—ñ—Ç 0: –°–∞–¥",
                        icon: "üå≥",
                        description: "–©–æ—Ç–∏–∂–Ω–µ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ | –ü–æ—à—Ç–∞ | –ú–∞–≥–∞–∑–∏–Ω –∂–µ—Ç–æ–Ω—ñ–≤ | –°–∞–¥",
                        details: "–©–æ–± –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ —Å—é–¥–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ 3 —Å–≤—ñ—Ç–∏"
                    },
                    {
                        title: "–°–≤—ñ—Ç 1: –ü–æ—á–∞—Ç–æ–∫",
                        icon: "üè†",
                        description: "–°—Ç–∞—Ä—Ç–æ–≤–∏–π —Å–≤—ñ—Ç, –¥–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≤–∞—à–∞ –ø—Ä–∏–≥–æ–¥–∞",
                        details: "–ë–∞–∑–æ–≤–µ –º—ñ—Å—Ü–µ –ø–æ—è–≤–∏ –¥–ª—è –≤—Å—ñ—Ö –Ω–æ–≤–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤"
                    },
                    {
                        title: "–°–≤—ñ—Ç 2: –§–∞–Ω—Ç–∞–∑—ñ—è",
                        icon: "üè∞",
                        description: "–ú–∞–≥—ñ—á–Ω–µ —Ü–∞—Ä—Å—Ç–≤–æ, –ø–æ–≤–Ω–µ –º—ñ—Ñ—ñ—á–Ω–∏—Ö —Å—Ç–≤–æ—Ä—ñ–Ω—å —ñ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—Ö –ª—ñ—Å—ñ–≤",
                        details: "–í–∏–º–æ–≥–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –°–≤—ñ—Ç 1"
                    },
                    {
                        title: "–°–≤—ñ—Ç 3: –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó",
                        icon: "ü§ñ",
                        description: "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω–∏–π —Å–≤—ñ—Ç –∑ –ø–µ—Ä–µ–¥–æ–≤–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è–º–∏ —ñ –∫—ñ–±–µ—Ä-–ø–∏—Ç–æ–º—Ü—è–º–∏",
                        details: "–í–∏–º–æ–≥–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –°–≤—ñ—Ç 2"
                    },
                    {
                        title: "–°–≤—ñ—Ç 4: –û–∫–µ–∞–Ω –ê–∫—Å–æ–ª–æ—Ç–ª—ñ–≤",
                        icon: "üåä",
                        description: "–ü—ñ–¥–≤–æ–¥–Ω–∏–π —Ä–∞–π, –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –∞–∫—Å–æ–ª–æ—Ç–ª—è–º–∏ —ñ –º–æ—Ä—Å—å–∫–∏–º –∂–∏—Ç—Ç—è–º",
                        details: "–í–∏–º–æ–≥–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –°–≤—ñ—Ç 3"
                    }
                ]
            },
            ru: {
                title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏—Ä–∞—Ö",
                loading: "–ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Ä–æ–≤...",
                error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤",
                retry: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                worlds: [
                    {
                        title: "–ú–∏—Ä 0: –°–∞–¥",
                        icon: "üå≥",
                        description: "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ | –ü–æ—á—Ç–∞ | –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–∫–µ–Ω–æ–≤ | –°–∞–¥",
                        details: "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å —Å—é–¥–∞, –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å 3 –º–∏—Ä–∞"
                    },
                    {
                        title: "–ú–∏—Ä 1: –°–ø–∞–≤–Ω",
                        icon: "üè†",
                        description: "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∏—Ä, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
                        details: "–ë–∞–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"
                    },
                    {
                        title: "–ú–∏—Ä 2: –§–∞–Ω—Ç–∞–∑–∏—è",
                        icon: "üè∞",
                        description: "–ú–∞–≥–∏—á–µ—Å–∫–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ, –ø–æ–ª–Ω–æ–µ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—É—â–µ—Å—Ç–≤ –∏ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ—Å–æ–≤",
                        details: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ó–∞–≤–µ—Ä—à–∏—Ç—å –ú–∏—Ä 1"
                    },
                    {
                        title: "–ú–∏—Ä 3: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                        icon: "ü§ñ",
                        description: "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∏—Ä —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –∫–∏–±–µ—Ä-–ø–∏—Ç–æ–º—Ü–∞–º–∏",
                        details: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ó–∞–≤–µ—Ä—à–∏—Ç—å –ú–∏—Ä 2"
                    },
                    {
                        title: "–ú–∏—Ä 4: –û–∫–µ–∞–Ω –ê–∫—Å–æ–ª–æ—Ç–ª–µ–π",
                        icon: "üåä",
                        description: "–ü–æ–¥–≤–æ–¥–Ω—ã–π —Ä–∞–π, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∞–∫—Å–æ–ª–æ—Ç–ª—è–º–∏ –∏ –º–æ—Ä—Å–∫–æ–π –∂–∏–∑–Ω—å—é",
                        details: "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: –ó–∞–≤–µ—Ä—à–∏—Ç—å –ú–∏—Ä 3"
                    }
                ]
            }
        };
        return worldsTranslations;
    }
}

// Update language when it changes globally - FIXED
function updateWorldsLanguage(newLanguage) {
    console.log(`üåç Worlds received language change request: ${worldsCurrentLanguage} ‚Üí ${newLanguage}`);
    
    if (newLanguage === worldsCurrentLanguage) {
        console.log('üîÑ Same language, skipping update');
        return;
    }
    
    worldsCurrentLanguage = newLanguage;
    console.log(`üåç Updating worlds language to: ${newLanguage}`);
    
    // Reinitialize if already initialized
    if (worldsInitialized) {
        worldsInitialized = false;
        setTimeout(initializeWorlds, 100);
    }
}

// Generate worlds content - FIXED
async function generateWorldsContent() {
    const container = document.getElementById('worldsContainer');
    if (!container) {
        console.error('‚ùå Worlds container not found');
        return;
    }
    
    // Get current language
    worldsCurrentLanguage = getCurrentLanguage();
    
    // Load translations if not already loaded
    if (!worldsTranslations) {
        await loadWorldsTranslations();
    }
    
    // Show loading state
    const loadingText = worldsTranslations[worldsCurrentLanguage]?.loading || 'Loading worlds...';
    container.innerHTML = `<div class="worlds-loading">${loadingText}</div>`;
    
    try {
        // Small delay to show loading animation
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const currentLangData = worldsTranslations[worldsCurrentLanguage];
        if (!currentLangData) {
            throw new Error(`Language data for ${worldsCurrentLanguage} not found`);
        }
        
        // Clear container
        container.innerHTML = '';
        
        // Generate world items with animation delay
        currentLangData.worlds.forEach((world, index) => {
            const worldItem = document.createElement('div');
            worldItem.className = 'world-item';
            worldItem.style.animationDelay = `${0.1 + (index * 0.05)}s`;
            worldItem.innerHTML = `
                <div class="world-title">
                    <span class="world-icon">${world.icon}</span>
                    <span>${world.title}</span>
                </div>
                <div class="world-description">${world.description}</div>
                <div class="world-details">${world.details}</div>
            `;
            container.appendChild(worldItem);
        });
        
        console.log(`‚úÖ Generated ${currentLangData.worlds.length} worlds in ${worldsCurrentLanguage}`);
        
    } catch (error) {
        console.error('‚ùå Error generating worlds content:', error);
        
        // Show error state
        const errorText = worldsTranslations[worldsCurrentLanguage]?.error || 'Error loading worlds data';
        const retryText = worldsTranslations[worldsCurrentLanguage]?.retry || 'Retry';
        
        container.innerHTML = `
            <div class="worlds-error">
                ‚ö†Ô∏è ${errorText}
                <br>
                <button class="retry-btn" onclick="generateWorldsContent()">${retryText}</button>
            </div>
        `;
    }
}

// Initialize worlds page - ENHANCED
async function initializeWorlds() {
    console.log('üåç Initializing worlds page...');
    
    const worldsPage = document.getElementById('worldsPage');
    if (!worldsPage) {
        console.error('‚ùå Worlds page not found');
        return;
    }
    
    // Check if already initialized and content exists
    if (worldsInitialized && worldsPage.querySelector('.world-item')) {
        console.log('üåç Worlds already initialized with content');
        return;
    }
    
    // Get saved language
    worldsCurrentLanguage = getCurrentLanguage();
    
    // Load translations
    await loadWorldsTranslations();
    
    const data = worldsTranslations[worldsCurrentLanguage];
    if (!data) {
        console.error('‚ùå Translation data not found');
        return;
    }
    
    // Create HTML structure
    worldsPage.innerHTML = `
        <h1 class="title">${data.title}</h1>
        <div class="worlds-container" id="worldsContainer"></div>
    `;
    
    // Generate content
    await generateWorldsContent();
    
    worldsInitialized = true;
    window.worldsInitialized = true;
    
    console.log('‚úÖ Worlds page initialized successfully');
}

// Force reinitialize worlds
function forceReinitializeWorlds() {
    console.log('üîÑ Force reinitializing worlds...');
    worldsInitialized = false;
    window.worldsInitialized = false;
    initializeWorlds();
}

// Debug function - FIXED
function debugWorlds() {
    console.log('=== WORLDS DEBUG ===');
    console.log('Initialized:', worldsInitialized);
    console.log('Current language:', worldsCurrentLanguage);
    console.log('Container exists:', !!document.getElementById('worldsContainer'));
    console.log('Page exists:', !!document.getElementById('worldsPage'));
    console.log('Page is active:', document.getElementById('worldsPage')?.classList.contains('active'));
    console.log('Translations loaded:', !!worldsTranslations);
    if (worldsTranslations) {
        console.log('Available languages:', Object.keys(worldsTranslations));
        if (worldsTranslations[worldsCurrentLanguage]) {
            console.log(`Worlds count for ${worldsCurrentLanguage}:`, worldsTranslations[worldsCurrentLanguage].worlds?.length);
        }
    }
    const container = document.getElementById('worldsContainer');
    if (container) {
        console.log('Container innerHTML length:', container.innerHTML.length);
        console.log('Has world items:', !!container.querySelector('.world-item'));
    }
    console.log('====================');
}

// Listen for global language changes - ENHANCED
document.addEventListener('languageChanged', function(e) {
    console.log('üåç Worlds received languageChanged event:', e.detail);
    if (e.detail && e.detail.language) {
        updateWorldsLanguage(e.detail.language);
    }
});

// Enhanced DOM ready handler
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåç DOM loaded, setting up worlds...');
    
    // Initialize immediately if worlds page is already active
    setTimeout(() => {
        const worldsPage = document.getElementById('worldsPage');
        if (worldsPage && worldsPage.classList.contains('active')) {
            console.log('üåç Worlds page is active, initializing...');
            initializeWorlds();
        }
    }, 100);
});

// Enhanced click handler for worlds page switching
document.addEventListener('click', function(e) {
    if (e.target && e.target.getAttribute && e.target.getAttribute('data-page') === 'worlds') {
        console.log('üåç Worlds page clicked, will initialize...');
        setTimeout(() => {
            const worldsPage = document.getElementById('worldsPage');
            if (!worldsInitialized || !worldsPage || !worldsPage.querySelector('.world-item')) {
                console.log('üåç Page switched to worlds, initializing...');
                initializeWorlds();
            } else {
                console.log('üåç Worlds already has content, skipping initialization');
            }
        }, 300);
    }
});

// Alternative legacy function name support
window.switchWorldsLanguage = updateWorldsLanguage;

// Make functions globally available
window.initializeWorlds = initializeWorlds;
window.updateWorldsLanguage = updateWorldsLanguage;
window.generateWorldsContent = generateWorldsContent;
window.debugWorlds = debugWorlds;
window.forceReinitializeWorlds = forceReinitializeWorlds;
window.worldsInitialized = worldsInitialized;

console.log('‚úÖ Fixed worlds.js loaded with enhanced multilingual support');
