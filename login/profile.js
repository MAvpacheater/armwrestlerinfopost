// profile.js - –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –ë–ï–ó –ó–ú–Ü–ù–ò –ê–í–ê–¢–ê–†–ö–ò
console.log('üë§ Loading profile.js...');

// Profile System Object
const ProfileSystem = {
    currentUser: null,
    authManager: null,

    // Initialize profile system
    init() {
        console.log('üë§ Initializing Profile System...');
        this.authManager = window.authManager;
        this.bindEvents();
        this.checkInitialAuthState();
        
        // –ó–∞—Ö–∏—â–∞—î–º–æ –∞–≤–∞—Ç–∞—Ä–∫—É –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        setTimeout(() => {
            this.protectProfileAvatar();
        }, 200);
    },

    // Bind events
    bindEvents() {
        // Listen for user authentication events
        document.addEventListener('userAuthenticated', (event) => {
            this.handleUserAuthenticated(event.detail);
        });

        document.addEventListener('userSignedOut', () => {
            this.handleUserSignedOut();
        });
        
        // –ó–∞—Ö–∏—â–∞—î–º–æ –∞–≤–∞—Ç–∞—Ä–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('pageChanged', (event) => {
            if (event.detail && event.detail.page === 'profile') {
                setTimeout(() => {
                    this.protectProfileAvatar();
                }, 100);
            }
        });
    },

    // –ó–∞—Ö–∏—Å—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é
    protectProfileAvatar() {
        const profileAvatar = document.getElementById('profileAvatar');
        
        if (profileAvatar && !profileAvatar.hasAttribute('data-protected')) {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ö–∏—â–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫—É
            const originalSrc = 'https://i.postimg.cc/gjmcXwV9/file-000000008fd461f4826bd65e36dbc3d2.png';
            profileAvatar.src = originalSrc;
            profileAvatar.setAttribute('data-protected', 'true');
            profileAvatar.setAttribute('data-initialized', 'true');
            
            // –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            profileAvatar.onerror = function() {
                this.src = 'https://via.placeholder.com/80x80/667eea/ffffff?text=üë§';
            };
            
            // MutationObserver –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –∑–º—ñ–Ω
            const observer = new MutationObserver((mutations) => {
                mutations.forEach((mutation) => {
                    if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                        const currentSrc = profileAvatar.src;
                        
                        // –Ø–∫—â–æ —Ö—Ç–æ—Å—å –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É
                        if (!currentSrc.includes('postimg.cc') && !currentSrc.includes('placeholder')) {
                            console.log('üõ°Ô∏è Avatar protection: restoring original image');
                            profileAvatar.src = originalSrc;
                        }
                    }
                });
            });
            
            observer.observe(profileAvatar, {
                attributes: true,
                attributeFilter: ['src']
            });
            
            console.log('üõ°Ô∏è Profile avatar protected');
        }
    },

    // Handle user authenticated
    handleUserAuthenticated(detail) {
        const { user, profile } = detail;
        this.currentUser = { user, profile };
        console.log('‚úÖ User authenticated in profile system:', user);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ë–ï–ó –∑–º—ñ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
        this.updateProfileSafely();
    },

    // Handle user signed out
    handleUserSignedOut() {
        this.currentUser = null;
        console.log('‚úÖ User signed out from profile system');
    },

    // –ë–µ–∑–ø–µ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –±–µ–∑ –∑–º—ñ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
    updateProfileSafely() {
        if (!this.currentUser) return;
        
        const { user, profile } = this.currentUser;
        const nickname = profile?.nickname || user?.email?.split('@')[0] || 'User';
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è
        const profileNickname = document.getElementById('profileNickname');
        const profileStatus = document.querySelector('.profile-status');
        const currentNicknameInput = document.getElementById('currentNickname');
        
        if (profileNickname) {
            profileNickname.textContent = nickname;
        }
        
        if (profileStatus) {
            const joinDate = profile?.joinDate || user?.joinDate || 'Recently';
            profileStatus.innerHTML = `Lvl: 0 <span id="profileJoinDate">(${joinDate})</span>`;
        }
        
        if (currentNicknameInput) {
            currentNicknameInput.value = nickname;
        }
        
        // –ù–ï –¢–û–†–ö–ê–Ñ–ú–û–°–Ø –ê–í–ê–¢–ê–†–ö–ò!
        console.log('‚úÖ Profile updated safely without touching avatar');
    },

    // Check initial auth state
    checkInitialAuthState() {
        setTimeout(() => {
            if (window.authManager && window.authManager.currentUser) {
                this.currentUser = {
                    user: window.authManager.currentUser,
                    profile: window.authManager.userProfile
                };
                this.updateProfileSafely();
            } else {
                const savedUser = localStorage.getItem('armHelper_currentUser');
                if (savedUser) {
                    try {
                        const user = JSON.parse(savedUser);
                        this.currentUser = { user, profile: user };
                        this.updateProfileSafely();
                    } catch (e) {
                        console.warn('Invalid saved user data');
                        localStorage.removeItem('armHelper_currentUser');
                    }
                }
            }
        }, 100);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ë–ï–ó –∑–º—ñ–Ω–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
function updateProfileDisplay() {
    console.log('üîÑ Global profile display update (safe)...');
    
    if (ProfileSystem.currentUser) {
        ProfileSystem.updateProfileSafely();
    } else {
        // Fallback –¥–æ –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if (typeof updateProfileDisplaySafe === 'function') {
            updateProfileDisplaySafe();
        }
    }
}

// Initialize profile system
function initializeProfile() {
    console.log('üë§ Initializing Profile system...');
    
    const profilePage = document.getElementById('profilePage');
    if (!profilePage) {
        console.warn('‚ö†Ô∏è Profile page not found');
        return;
    }

    ProfileSystem.init();
    
    // Initialize settings if available
    if (typeof initializeProfileSettings === 'function') {
        initializeProfileSettings();
    }
    
    console.log('‚úÖ Profile system initialized');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø—Ä–æ—Ñ—ñ–ª—é
function openProfile() {
    console.log('üö™ Opening profile...');
    
    if (typeof switchPage === 'function') {
        switchPage('profile');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –±–µ–∑–ø–µ—á–Ω–æ
        setTimeout(() => {
            ProfileSystem.updateProfileSafely();
            ProfileSystem.protectProfileAvatar();
        }, 100);
    }
}

// Export for global use
if (typeof window !== 'undefined') {
    window.ProfileSystem = ProfileSystem;
    window.initializeProfile = initializeProfile;
    window.updateProfileDisplay = updateProfileDisplay;
    window.openProfile = openProfile;
}

// Auto-initialize when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        if (typeof initializeProfile === 'function') {
            initializeProfile();
        }
    }, 100);
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
document.addEventListener('contentLoaded', () => {
    setTimeout(() => {
        ProfileSystem.protectProfileAvatar();
    }, 200);
});

console.log('‚úÖ profile.js loaded with avatar protection');
